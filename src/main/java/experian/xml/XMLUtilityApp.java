/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package experian.xml;


import experian.xml.kpi.KPIAnalysis;
import experian.xml.merge.XMLMerger;
import experian.xml.validation.XMLValidator;
import org.apache.log4j.Logger;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;

/**
 * Created exclusively for Bristlecone internal use.
 * @author nitesh.jain
 */
public class XMLUtilityApp extends JFrame {

    public static final String APP_NAME = "XML-Utility";
    private static Logger rootLogger = Logger.getRootLogger();
    private File schemaFile;
    private File xmlDir;
    // Variables declaration - do not modify
    private JButton browseButton;
    private JButton startButton;
    private JButton schemaButton;
    private JComboBox operationsCombo;
    private JLabel inputPathLabel;
    private JLabel selectOprLabel;
    private JTextField dirPathTextField;

    /**
     * Creates new form XMLUtilityApp
     */
    public XMLUtilityApp() {
        initComponents();
        setTitle(APP_NAME);
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(XMLUtilityApp.class.getResource("/icon.png")).getImage());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | UnsupportedLookAndFeelException | IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XMLUtilityApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new XMLUtilityApp().setVisible(true));
        rootLogger.info(APP_NAME + "Window visible");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        inputPathLabel = new JLabel();
        dirPathTextField = new JTextField();
        browseButton = new JButton();
        selectOprLabel = new JLabel();
        startButton = new JButton();
        schemaButton = new JButton();
        operationsCombo = new JComboBox(new Object[]{Task.MERGE,
                Task.VALIDATION, Task.KPI_ANALYSIS});
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        inputPathLabel.setText("Enter XML Directory Path:");

        browseButton.setText("Browse");
        browseButton.addActionListener(evt -> openFileChooser());

        selectOprLabel.setText("Choose Task:");

        startButton.setText("START");
        startButton.addActionListener(evt -> {
            rootLogger.info("Start clicked!!");
            if (isValidXmlDir()) {
                startOperation((Task) operationsCombo.getSelectedItem());
            } else {
                JOptionPane.showMessageDialog(null, "Invalid or empty path!!",
                        APP_NAME, JOptionPane.ERROR_MESSAGE);
            }
        });

        schemaButton.setText("SCHEMA");
        schemaButton.addActionListener(evt -> chooseSchemaDirectory());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(selectOprLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(operationsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(schemaButton))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(2, 2, 2)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(inputPathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(196, 196, 196))
                                                                        .addComponent(dirPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(browseButton)
                                                        .addComponent(startButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(inputPathLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dirPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(browseButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectOprLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(operationsCombo)
                                        .addComponent(schemaButton)
                                        .addComponent(startButton))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void openFileChooser() {
        JFileChooser xmlChooser = new JFileChooser();
        xmlChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (xmlChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            xmlDir = xmlChooser.getSelectedFile();
            dirPathTextField.setText(xmlDir.getPath());
            rootLogger.info("Xml-Directory: " + xmlDir.getPath());
        }
    }

    private void chooseSchemaDirectory() {
        JFileChooser schemaChooser = new JFileChooser();
        schemaChooser.setAcceptAllFileFilterUsed(false);
        schemaChooser.setFileFilter(new FileNameExtensionFilter("Schema(xsd)", "xsd"));
        if (schemaChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            schemaFile = schemaChooser.getSelectedFile();
            rootLogger.info("Schema: " + schemaFile.getPath());
        }
    }

    private void startOperation(Task task) {
        boolean isTaskComplete = false;
        switch (task) {
            case MERGE:
                isTaskComplete = new XMLMerger().mergeXMLFiles(xmlDir);
                break;
            case VALIDATION:
                if (schemaFile == null) {
                    rootLogger.info("No Schema Selected!!");
                    JOptionPane.showMessageDialog(this, "No Schema Selected!!", APP_NAME, JOptionPane.ERROR_MESSAGE);
                    return;
                }
                isTaskComplete = new XMLValidator().processXMLValidation(xmlDir, schemaFile);
                break;
            case KPI_ANALYSIS:
                isTaskComplete = new KPIAnalysis(xmlDir).analyseCriteria();
                break;
            default:
                rootLogger.error("No such task!!");
        }
        showMessageDialog(task, isTaskComplete);
    }

    private void showMessageDialog(Task task, boolean isTaskComplete) {
        if (isTaskComplete) {
            rootLogger.info(task.name() + " FINISHED!!");
            JOptionPane.showMessageDialog(this, task.name() + " FINISHED!!",
                    APP_NAME, JOptionPane.INFORMATION_MESSAGE);
        } else {
            rootLogger.error(task.name() + " FAILURE!!");
            JOptionPane.showMessageDialog(this, task.name() + " FAILURE!!",
                    APP_NAME, JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean isValidXmlDir() {
        String xmlDirPath = dirPathTextField.getText();
        if (xmlDirPath != null && !xmlDirPath.equals("")) {
            xmlDir = new File(xmlDirPath);
            return (xmlDir.exists() && xmlDir.isDirectory());
        }
        rootLogger.error("Invalid or empty path: " + xmlDirPath);
        return false;
    }

    enum Task {
        MERGE, VALIDATION, KPI_ANALYSIS
    }
}
